// Mocks generated by Mockito 5.4.4 from annotations
// in cloudy/test/app/features/home/data/repository/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloudy/app/features/home/data/datasources/local/weather_local_datasource.dart'
    as _i7;
import 'package:cloudy/app/features/home/data/datasources/remote/weather_remote_datasource.dart'
    as _i3;
import 'package:cloudy/app/features/home/data/models/res_forecast_weather.dart'
    as _i5;
import 'package:cloudy/app/features/home/data/models/res_history_weather.dart'
    as _i6;
import 'package:cloudy/core/state/data_state.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSourceImpl extends _i1.Mock
    implements _i3.WeatherRemoteDataSourceImpl {
  @override
  _i4.Future<_i2.DataState<_i5.ResForecastWeather>> getForecastWeather({
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastWeather,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i4.Future<_i2.DataState<_i5.ResForecastWeather>>.value(
            _FakeDataState_0<_i5.ResForecastWeather>(
          this,
          Invocation.method(
            #getForecastWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<_i5.ResForecastWeather>>.value(
                _FakeDataState_0<_i5.ResForecastWeather>(
          this,
          Invocation.method(
            #getForecastWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i5.ResForecastWeather>>);

  @override
  _i4.Future<_i2.DataState<_i6.ResHistoryWeather>> getHistoryWeather({
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoryWeather,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i4.Future<_i2.DataState<_i6.ResHistoryWeather>>.value(
            _FakeDataState_0<_i6.ResHistoryWeather>(
          this,
          Invocation.method(
            #getHistoryWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<_i6.ResHistoryWeather>>.value(
                _FakeDataState_0<_i6.ResHistoryWeather>(
          this,
          Invocation.method(
            #getHistoryWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i6.ResHistoryWeather>>);
}

/// A class which mocks [WeatherLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSourceImpl extends _i1.Mock
    implements _i7.WeatherLocalDataSourceImpl {
  @override
  _i4.Future<_i2.DataState<String>> saveWeatherByArea(
          List<Map<String, dynamic>>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWeatherByArea,
          [data],
        ),
        returnValue:
            _i4.Future<_i2.DataState<String>>.value(_FakeDataState_0<String>(
          this,
          Invocation.method(
            #saveWeatherByArea,
            [data],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<String>>.value(_FakeDataState_0<String>(
          this,
          Invocation.method(
            #saveWeatherByArea,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.DataState<String>>);

  @override
  _i4.Future<_i2.DataState<List<Map<String, dynamic>>>> getWeatherByArea() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByArea,
          [],
        ),
        returnValue:
            _i4.Future<_i2.DataState<List<Map<String, dynamic>>>>.value(
                _FakeDataState_0<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #getWeatherByArea,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DataState<List<Map<String, dynamic>>>>.value(
                _FakeDataState_0<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #getWeatherByArea,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<Map<String, dynamic>>>>);
}
